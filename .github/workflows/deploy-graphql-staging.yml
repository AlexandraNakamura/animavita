name: Animavita GraphQL Deploy on Staging

on: [push]
#  push:
#    branches:
#      - 'master'
#    paths:
#      - 'packages/graphql/**'
#      - 'packages/babel/**'
#      - 'packages/eslint-config/**'
#      - 'packages/aws/**'

jobs:
  #  test-graphql:
  #    name: GraphQL Tests
  #    runs-on: ubuntu-latest
  #    if: "!contains(github.event.head_commit.message, '[skip ci]')"
  #
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/setup-node@v1
  #        with:
  #          node-version: '12.x'
  #      - name: Skip based on commit message
  #        uses: veggiemonk/skip-commit@1.0.0
  #      - name: Get yarn cache dir
  #        id: get-yarn-cache
  #        run: echo "::set-output name=dir::$(yarn cache dir)"
  #      - name: Cache yarn.lock
  #        id: yarn-cache
  #        uses: actions/cache@v1
  #        with:
  #          path: ${{ steps.get-yarn-cache.outputs.dir }}
  #          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #          restore-keys: |
  #            ${{ runner.os }}-yarn-
  #      - name: Install
  #        run: |
  #          yarn config set unsafe-disable-integrity-migration true -g
  #          yarn install --frozen-lockfile --production=false --non-interactive --cache-folder $(yarn cache dir)
  #      - name: Test GraphQL
  #        run: |
  #          yarn test:graphql --ci --maxWorkers=4 --forceExit

  deploy-graphql-staging:
    name: Deploy GraphQL on Staging
    #    needs: [test-graphql]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: chrislennon/action-aws-cli@v1.1
      - name: Get yarn cache dir
        id: get-yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn.lock
        id: yarn-cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: |
          yarn config set unsafe-disable-integrity-migration true -g
          yarn install --frozen-lockfile --production=false --non-interactive --cache-folder $(yarn cache dir)
      - name: Deploy to AWS Lambda
        run: yarn deploy:graphql:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          MONGO_STAGING_URI: ${{ secrets.MONGO_STAGING_URI }}
