diff --git a/node_modules/react-native-elements/src/slider/Slider.js b/node_modules/react-native-elements/src/slider/Slider.js
index ee99b40..a70ccc1 100644
--- a/node_modules/react-native-elements/src/slider/Slider.js
+++ b/node_modules/react-native-elements/src/slider/Slider.js
@@ -1,6 +1,6 @@
 import React, { Component } from 'react';
 import PropTypes from 'prop-types';
-import { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';
+import { View, StyleSheet, Animated, Easing, PanResponder, Platform } from 'react-native';
 
 import { withTheme } from '../config';
 
@@ -207,6 +207,7 @@ class Slider extends Component {
     }
     this[storeName] = size;
 
+    console.log(this._containerSize, this._trackSize, this._thumbSize)
     if (this._containerSize && this._trackSize && this._thumbSize) {
       this.setState({
         containerSize: this._containerSize,
@@ -327,10 +328,16 @@ class Slider extends Component {
 
     if (this.props.orientation === 'vertical') {
       minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);
-      minimumTrackStyle.marginLeft = -trackSize.width;
+      minimumTrackStyle.marginLeft = Platform.select({
+        web: 0,
+        default: -trackSize.width,
+      });
     } else {
       minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);
-      minimumTrackStyle.marginTop = -trackSize.height;
+      minimumTrackStyle.marginTop = Platform.select({
+        web: 0,
+        default: -trackSize.height,
+      });
     }
     return minimumTrackStyle;
   }
@@ -380,7 +387,7 @@ class Slider extends Component {
     });
 
     const valueVisibleStyle = {};
-    if (!allMeasured) {
+    if (!allMeasured && !Platform.OS === 'web') {
       valueVisibleStyle.height = 0;
       valueVisibleStyle.width = 0;
     }
@@ -393,6 +400,8 @@ class Slider extends Component {
 
     const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];
     const touchOverflowStyle = this.getTouchOverflowStyle();
+    const height = trackStyle && trackStyle.width;
+
     return (
       <View
         {...other}
@@ -432,8 +441,8 @@ class Slider extends Component {
             { backgroundColor: thumbTintColor },
             mainStyles.thumb,
             orientation === 'vertical'
-              ? mainStyles.thumbVertical(trackStyle && trackStyle.width)
-              : mainStyles.thumbHorizontal(trackStyle && trackStyle.height),
+              ? {left: 22 + (height ? (height - 4) / 2 : 0)}
+              : {top: 22 + (height ? (height - 4) / 2 : 0)},
             thumbStyle,
             {
               transform: [
@@ -600,6 +609,7 @@ const styles = StyleSheet.create({
     width: 40,
     flexDirection: 'column',
     alignItems: 'center',
+    flex: 1, 
   },
   track: {
     borderRadius: TRACK_SIZE / 2,
@@ -617,12 +627,6 @@ const styles = StyleSheet.create({
     height: THUMB_SIZE,
     borderRadius: THUMB_SIZE / 2,
   },
-  thumbHorizontal: height => ({
-    top: 22 + (height ? (height - 4) / 2 : 0),
-  }),
-  thumbVertical: width => ({
-    left: 22 + (width ? (width - 4) / 2 : 0),
-  }),
   touchArea: {
     position: 'absolute',
     backgroundColor: 'transparent',
